--- dictionary	2019-06-27 16:34:16.713812240 -0400
+++ dictionary	2019-06-27 16:35:35.506429685 -0400
@@ -47,3 +47,16 @@
 #ATTRIBUTE	My-Local-String		3000	string
 #ATTRIBUTE	My-Local-IPAddr		3001	ipaddr
 #ATTRIBUTE	My-Local-Integer	3002	integer
+
+
+ATTRIBUTE	Cisco-MUD-URL		3000	string
+ATTRIBUTE 	Url-Name		3001	string
+ATTRIBUTE 	Url-Data		3002	string
+ATTRIBUTE 	Url-DataType		3003	string
+ATTRIBUTE 	Url-AddData		3004	string
+ATTRIBUTE 	Url-AddDataType		3005	string
+ATTRIBUTE 	Url-Nas			3006	string
+ATTRIBUTE 	Url-NasType		3007	string
+ATTRIBUTE 	Url-Sessid		3008	string
+ATTRIBUTE 	Url-SessidType		3009	string
+ATTRIBUTE 	TLS-Client-Cert-1.3.6.1.5.5.7.1.25	3010	string
--- mods-available/rest	2019-06-27 16:34:16.709812209 -0400
+++ mods-available/rest	2019-06-27 16:45:35.618997675 -0400
@@ -46,7 +46,7 @@
 	#
 	# If you wish to disable this pre-caching and reachability check,
 	# comment out the configuration item below.
-	connect_uri = "http://127.0.0.1/"
+	connect_uri = "http://127.0.0.1:8000/"
 
 	#
 	#  How long before new connection attempts timeout, defaults to 4.0 seconds.
@@ -157,9 +157,14 @@
 	#  5xx    server error  no            fail
 	#  xxx    -             no            invalid
 	authorize {
-		uri = "${..connect_uri}/user/%{User-Name}/mac/%{Called-Station-ID}?action=authorize"
-		method = 'get'
-		tls = ${..tls}
+	#	uri = "${..connect_uri}/user/%{User-Name}/mac/%{Called-Station-ID}?action=authorize"
+	#	method = 'get'
+	#	tls = ${..tls}
+ 		body = 'json'
+ 		uri = "${..connect_uri}/%{Url-Name}"
+ 		data = '{"%{Url-DataType}":"%{Url-Data}"}'
+ 		force_to = 'json'
+ 		method = 'post'
 	}
 	authenticate {
 		uri = "${..connect_uri}/user/%{User-Name}/mac/%{Called-Station-ID}?action=authenticate"
@@ -180,14 +185,24 @@
                 tls = ${..tls}
         }
 	accounting {
-		uri = "${..connect_uri}/user/%{User-Name}/sessions/%{Acct-Unique-Session-ID}?action=accounting"
-		method = 'post'
-		tls = ${..tls}
+	#	uri = "${..connect_uri}/user/%{User-Name}/sessions/%{Acct-Unique-Session-ID}?action=accounting"
+	#	method = 'post'
+	#	tls = ${..tls}
+		body = 'json'
+ 		uri = "${..connect_uri}/%{Url-Name}"
+ 		data = '{"%{Url-DataType}":"%{Url-Data}","%{Url-AddDataType}":"%{Url-AddData}","%{Url-NasType}":"%{Url-Nas}","%{Url-SessidType}":"%{Url-Sessid}"}'
+ 		force_to = 'json'
+ 		method = 'post'
 	}
 	post-auth {
-		uri = "${..connect_uri}/user/%{User-Name}/mac/%{Called-Station-ID}?action=post-auth"
-		method = 'post'
-		tls = ${..tls}
+	#	uri = "${..connect_uri}/user/%{User-Name}/mac/%{Called-Station-ID}?action=post-auth"
+	#	method = 'post'
+	#	tls = ${..tls}
+                body = 'json'
+                uri = "${..connect_uri}/%{Url-Name}"
+                data = {"%{Url-DataType}":"%{Url-Data}"}
+                force_to = 'json'
+                method = 'post'
 	}
 	pre-proxy {
 		uri = "${..connect_uri}/user/%{User-Name}/mac/%{Called-Station-ID}?action=pre-proxy"
--- mods-config/perl/example.pl	2019-06-27 16:34:16.693812083 -0400
+++ mods-config/perl/example.pl	2019-06-27 16:46:47.735536757 -0400
@@ -110,7 +110,125 @@
 
 	# Here's where your authorization code comes
 	# You can call another function from here:
-	&test_call;
+	# &test_call;
+
+	# Cisco-AVPair will be either an ARRAY (actually, a hash) or a
+ 	# single AV pair that is not an array. FreeRADIUS seems to send
+ 	# them differently. So we have to check if there's just one or not
+ 	# (as well as checking for none).
+
+ 	if (not defined $RAD_REQUEST{'Cisco-AVPair'}) {
+ 		radiusd::radlog(L_DBG, "Cisco-AVPair not present");
+ 		return RLM_MODULE_OK;
+ 	}
+
+ 	if (ref($RAD_REQUEST{'Cisco-AVPair'}) eq 'ARRAY') {
+ 	    #
+ 	    # The array is passed within a hash value, and there does not
+ 	    # seem to be a way to get its size! Note that statements such
+ 	    # as
+ 	    # 	my @values = values %RAD_REQUEST{'Cisco-AVPair'};
+ 	    # NO LONGER WORK as of Perl 5.28.
+ 	    #
+ 	    # So we loop through the array sequentially, assuming that
+ 	    #   (a) There will be no more than 40 Cisco-AVPair values, and
+ 	    #   (b) the "method=" statement is the last one.
+ 	    #
+ 	    for (my $i=0; $i <=40; $i++) {
+ 	    	radiusd::radlog(L_DBG, "C-AV: $RAD_REQUEST{'Cisco-AVPair'}[$i]");
+ 			if ( $RAD_REQUEST{'Cisco-AVPair'}[$i] =~ /^method/ ) {
+ 	    		radiusd::radlog(L_DBG, "C-AV: End of List");
+ 			last;
+ 		}
+ 		#
+ 		# This finds a "vendor specific" LLDP TLV (type 127). It
+ 		# may be a MUD URL, or may be some other TLV. To make sure
+ 		# it's a MUD URL, first check the IANA OUI and then find the
+ 		# 'http' string.
+ 		#
+ 		if ( $RAD_REQUEST{'Cisco-AVPair'}[$i] =~ /^lldp-tlv=\000\177/ ) {
+ 		    	my $value = $RAD_REQUEST{'Cisco-AVPair'}[$i];
+ 			if ($value =~ /\000\000\136\001http/) {
+ 				my $loc = index($value, "http");
+ 				$RAD_STATE{'Cisco-MUD-URL'} =
+ 					substr($value, $loc);
+ 				radiusd::radlog(L_DBG, "Returning MUD URL from LLDP TLV: $RAD_STATE{'Cisco-MUD-URL'}");
+ 				last;
+ 	    		}
+ 		}
+ 		#
+ 		# This finds a DHCP Option 161, which should be a MUD URL.
+ 		# However, there are older uses of Option 161, so if there is
+ 		# no 'http' just skip it.
+ 		#
+ 		if ( $RAD_REQUEST{'Cisco-AVPair'}[$i] =~
+ 		    		/^dhcp-option=\000\241/ ) {
+ 		    	my $value = $RAD_REQUEST{'Cisco-AVPair'}[$i];
+ 			my $loc = index($value, "http");
+ 			if ( $loc != 0 ) {
+ 				$RAD_STATE{'Cisco-MUD-URL'} =
+ 					substr($value, $loc);
+ 				radiusd::radlog(L_DBG, "Returning MUD URL from DHCP Option: $RAD_STATE{'Cisco-MUD-URL'}");
+ 				last;
+ 			}
+ 		}
+
+ 	    }
+ 	} else {
+ 	    #
+ 	    # There was a single Cisco-AVPair attribute
+ 	    #
+ 	    radiusd::radlog(L_DBG, "C-AV: $RAD_REQUEST{'Cisco-AVPair'}");
+
+ 	    #
+ 	    # Check to see if it's a MUD URL in LLDP.
+ 	    #
+ 	    if ( $RAD_REQUEST{'Cisco-AVPair'} =~ /^lldp-tlv=\000\177/ ) {
+ 	    	my $value = $RAD_REQUEST{'Cisco-AVPair'};
+ 		if ($value =~ /\000\000\136\001http/) {
+ 		    my $loc = index($value, "http");
+ 		    $RAD_STATE{'Cisco-MUD-URL'} =  substr($value, $loc);
+ 		    radiusd::radlog(L_DBG, "Returning MUD URL from LLDP TLV: $RAD_STATE{'Cisco-MUD-URL'}");
+ 	    	}
+ 	    #
+ 	    # Check to see if it's a MUD URL in DHCP.
+ 	    #
+ 	    } elsif ( $RAD_REQUEST{'Cisco-AVPair'} =~ /^dhcp-option=\000\241/ ){
+ 		my $value = $RAD_REQUEST{'Cisco-AVPair'};
+ 		my $loc = index($value, "http");
+ 		if ( $loc != 0 ) {
+ 		    $RAD_STATE{'Cisco-MUD-URL'} = substr($value, $loc);
+ 		    radiusd::radlog(L_DBG, "Returning MUD URL from DHCP Option: $RAD_STATE{'Cisco-MUD-URL'}");
+ 		}
+ 	    }
+ 	}
+
+ 	#
+ 	# Return 'User-Name' in the session data, preferably from the
+ 	# Accounting message. If there is no 'User-Name' in the # accounting
+ 	# message, then assume there was no authentication and fill it in from
+ 	# the # "Calling-Station-Id" to emulate MAB.
+ 	#
+ 	# NOTE: This value is used instead of the 'User-Name' determined by
+ 	# FreeRADIUS, which for an accounting message is also likely to be the
+ 	# 'User-Name' from the message.
+ 	#
+ 	if (defined $RAD_REQUEST{'User-Name'}) {
+ 		$RAD_STATE{'User-Name'} = $RAD_REQUEST{'User-Name'};
+ 		radiusd::radlog(L_DBG, "Returning User-Name from 'User-Name': $RAD_STATE{'User-Name'}");
+
+ 	} elsif (defined $RAD_REQUEST{'Calling-Station-Id'}) {
+ 	    	#
+ 		# Remove the '-'s and change upper case to lower case.
+ 		#
+ 		my $username = $RAD_REQUEST{'Calling-Station-Id'} =~ s/-//gr;
+ 		$username = lc $username;
+ 		$RAD_STATE{'User-Name'} = $username;
+ 		radiusd::radlog(L_DBG, "Returning User-Name from 'Calling-Station-Id': $RAD_STATE{'User-Name'}");
+ 	} else {
+ 		radiusd::radlog(L_DBG, "No User-Name returned");
+ 	}
+
 
 	return RLM_MODULE_OK;
 }
--- radiusd.conf	2019-06-27 16:34:16.713812240 -0400
+++ radiusd.conf	2019-06-27 16:47:48.287988425 -0400
@@ -389,6 +389,10 @@
 #  of those attacks
 #
 security {
+
+ 	
+ 	allow_vulnerable_openssl = 'CVE-2016-6304'
+
 	#  chroot: directory where the server does "chroot".
 	#
 	#  The chroot is done very early in the process of starting
--- sites-available/default	2019-06-27 16:34:16.721812304 -0400
+++ sites-available/default	2019-06-27 16:51:41.761723365 -0400
@@ -291,6 +291,33 @@
 	#
 	filter_username
 
+ 	# The following lines are needed to recognize that the username 
+ 	# provided by the Catalyst switch is the name of a dACL.
+ 	#
+ 	if (User-Name =~ /^(mud-)/) {
+ 		update control {
+ 			Auth-Type := Accept
+ 		}	
+ 	}
+ 	
+ 	# The following lines allow FreeRADIUS to allow any "User-Name' that
+ 	# looks like a MAC address (i.e., Cisco "MAC Address Bypass (MAB)), 
+ 	# so that we can accept the MUD URL sent in a AAA Accounting message 
+ 	# later.
+ 	if ((User-Name =~ /^([0-9a-f]{12})/)) {
+ 		update {
+ 		 	&Url-Name := "getaclname"
+ 			&Url-DataType := "MAC_ADDR"
+ 			&Url-Data :="%{User-Name}" 
+ 		}
+ 		rest
+ 		update control {
+ 			Auth-Type := Accept
+ 		}	
+ 	}
+ 
+ 
+
 	#
 	#  Some broken equipment sends passwords with embedded zeros.
 	#  i.e. the debug output will show
@@ -629,6 +656,29 @@
 	#  If you don't use "radlast", you can delete this line.
 	unix
 
+ 	# The perl module checks for a MUD URI as a Cisco-TLV. If there a TLV,
+ 	# it is returned in Cisco-MUD-URL (used for both X.509 certificate and 
+ 	# LLDP use cases), and then the rest module is called to provide the 
+ 	# MUD URI to the MUD controller and retreive ACL names built from the 
+ 	# contents of the MUD file.
+ 	#
+ 	perl
+ 	if (&session-state:Cisco-MUD-URL) {
+ 		update {
+ 			&Url-Name := "getaclname"
+ 			&Url-DataType := "MAC_ADDR"
+ 			&Url-Data :="%{session-state:User-Name}" 
+ 			&Url-AddDataType := "MUD_URI"
+ 			&Url-AddData :="%{session-state:Cisco-MUD-URL}"
+ 			&Url-NasType := "NAS"
+ 			&Url-Nas :="%{NAS-IP-Address}" 
+ 			&Url-SessidType := "SESS_ID"
+ 			&Url-Sessid :="%{Acct-Session-Id}"
+ 		}
+ 		rest
+ 	}
+ 
+
 	#
 	#  For Simultaneous-Use tracking.
 	#
@@ -705,6 +755,14 @@
 #		}
 #	}
 
+ 	if (!&reply:State) {
+ 		update reply {
+ 			State := "0x%{randstr:16h}"
+ 			User-Name := "%{User-Name}"
+ 			Message-Authenticator := 0x00
+ 		}
+ 	}
+
 	#
 	#  For EAP-TTLS and PEAP, add the cached attributes to the reply.
 	#  The "session-state" attributes are automatically cached when
@@ -723,9 +781,48 @@
 			&User-Name !* ANY
 		}
 	}
-	update {
-		&reply: += &session-state:
-	}
+#	update {
+#		&reply: += &session-state:
+#	}
+
+ 	# This allows FreeRADIUS to accept a Cisco proprietary MUD URI RADIUS
+ 	# TLV -- NOT TESTED -- MIGHT PREPEND AN EXTRANEOUS "URI:" To URI VALUE
+ 	if (Cisco-MUD-URL) {
+ 		update {
+ 			&Url-Name := "getaclname"
+ 			&Url-AddDataType := "MUD_URI"
+ 			&Url-AddData :="%{Cisco-MUD-URL}"
+ 			&Url-NasType := "NAS"
+ 			&Url-Nas :="%{NAS-IP-Address}" 
+ 			&Url-SessidType := "SESS_ID"
+ 			&Url-Sessid :="%{Acct-Session-Id}"
+ 		}
+ 		rest
+ 		
+ 	# This allows FreeFADIUS to recognize a MUD URI delivered in an X.509
+ 	# certificate.
+ 	} elsif (TLS-Client-Cert-1.3.6.1.5.5.7.1.25) {
+ 		update {
+ 			&Url-Name := "getaclname"
+ 			&Url-DataType := "MUD_URI"
+ 			&Url-Data :="%{TLS-Client-Cert-1.3.6.1.5.5.7.1.25}"
+ 		}
+ 		rest
+ 		
+ 	# This allows FreeRADIUS to recognize that a Cisco Catalyst switch has 
+ 	# provided a dACL name and is asking for the contents of the dACL. 
+ 	# This configuration uses the "rest" module again to forward the
+ 	# dACL name to the MUD controller, which will return the contents of 
+ 	# the dACL.
+ 	#
+ 	} elsif (User-Name =~ /^(mud-)/) {
+ 		update {
+ 			&Url-Name := "getaclpolicy"
+ 			&Url-DataType := "ACL_NAME"
+ 			&Url-Data := "%{User-Name}"
+ 		}
+ 		rest
+  	}
 
 	#  Get an address from the IP Pool.
 #	main_pool
