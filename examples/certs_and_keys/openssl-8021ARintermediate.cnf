##############################################################################
# The content of this file is taken from the "Guide for building an ECC pki"
# draft available at
# https://datatracker.ietf.org/doc/draft-moskowitz-ecdsa-pki/?include_text=1
##############################################################################


# OpenSSL 8021ARintermediate CA configuration file.
# Copy to `$dir/8021ARintermediate/openssl-8021ARintermediate.cnf`.
#
# Remove the crlDistributionPoints to drop CRL support and
# authorityInfoAccess to drop OCSP support.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
# dir               = /root/ca/8021ARintermediate
dir               = $ENV::dir
cadir             = $ENV::cadir
format            = $ENV::format

certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $dir/private/8021ARintermediate.key.$format
certificate       = $dir/certs/8021ARintermediate.cert.$format

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = $ENV::default_crl_days

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_enddate   = 99991231235959Z # per IEEE 802.1AR
preserve          = no
policy            = policy_loose
copy_extensions   = copy

[ policy_strict ]
# The root CA should only sign 8021ARintermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = optional

[ policy_loose ]
# Allow the 8021ARintermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
serialNumber            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only
req_extensions      = req_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
serialNumber                    = Device Serial Number

# Optionally, specify some defaults.
0.organizationName_default      = HTT Consulting
organizationalUnitName_default  = Devices

[ req_ext ]
subjectAltName = $ENV::subjectAltName

[ hmodname ]
hwType = OID:$ENV::hwType
hwSerialNum = FORMAT:HEX,OCT:$ENV::hwSerialNum

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_8021ARintermediate_ca ]
# Extensions for a typical
#   8021ARintermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
# keyUsage = critical, digitalSignature, cRLSign, keyCertSign
keyUsage = critical, cRLSign, keyCertSign

[ 8021ar_idevid ]
# Extensions for IEEE 802.1AR iDevID
#   certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
# uncomment the following if the ENV variables set
# crlDistributionPoints = $ENV::crlDP
# authorityInfoAccess = $ENV::ocspIAI

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning


[ mud_signers ]
# This section is for inclusion of the MUD-signer extension in a
# device certificate.  It represents an X.509 Name, as defined in
# RFC 5280 that is referenced in the Subject Name of the signing
# certificate of the MUD file signature (described in sections
# 11 and 13 of RFC 8520).
#
# N.B. this form may vary somewhat based on the CHOICE of Name
# used in a certificate.  The way this is handled is as follows:
#
# Use the dumpasn1 to determine the appropriate structure.  For
# example, the following output represents the name
# "C = CH, emailAddress = ascertia@ofcourseimright.com, CN = Eliot Lear"
#
# [...]
# 147   79:     SEQUENCE {
# 149   11:       SET {
# 151    9:         SEQUENCE {
# 153    3:           OBJECT IDENTIFIER countryName (2 5 4 6)
# 158    2:           PrintableString 'CH'
#         :           }
#         :         }
# 162   43:       SET {
# 164   41:         SEQUENCE {
# 166    9:           OBJECT IDENTIFIER emailAddress (1 2 840 113549 1 9 1)
# 177   28:           IA5String 'ascertia@ofcourseimright.com'
#         :           }
#         :         }
# 207   19:       SET {
# 209   17:         SEQUENCE {
# 211    3:           OBJECT IDENTIFIER commonName (2 5 4 3)
# 216   10:           PrintableString 'Eliot Lear'
#         :           }
#         :         }
#         :       }
#[...]
#
# The representation is generated as follows.
# A SEQUENCE is represented in this configuration in the usr_cert section
# below as "1.3.6.1.5.5.7.1.30=ASN1:SEQ:mud_signers" where "mud_signers"
# refers to the section "mud_signers"
#
# A SET is generated by referring within that section to a "SET",
# for example: countryName=SET:cname_section
#
# This in turn requires another SEQUENCE, which is specified in our
# example in the "cname_section" as cname_seq_type=SEQ:cname_seq
#
# Finally in the cname_seq section we can name the actual OID and country name.
#  cname_oid=OID:2.5.4.6
#  cname_val=PRINTABLESTRING:"CH"


countryName=SET:cname_section
emailAddress=SET:email_section
CN=SET:cn_section

[ cname_section ]
cname_seq_type=SEQ:cname_seq

[ cname_seq ]
cname_oid=OID:2.5.4.6
cname_val=PRINTABLESTRING:"CH"

[ email_section ]
email_seq_type=SEQ:email_seq

[ email_seq ]
emailOID=OID:1.2.840.113549.1.9.1
email_val=IA5:"ascertia@ofcourseimright.com"

[ cn_section ]
cn_seq_type=SEQ:cn_seq

[ cn_seq ]
cn_oid=OID:2.5.4.3
cn_val=PRINTABLESTRING:"Eliot Lear"

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
# nsComment			= "OpenSSL Generated Certificate"
1.3.6.1.5.5.7.1.25=ASN1:IA5STRING:https://www.ofcourseimright.com/Luminaire_150.json"
1.3.6.1.5.5.7.1.30=ASN1:SEQ:mud_signers